spring.application.name=apiGateway
server.port=9000
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/backend


## Actuator End points
## web-exposure --> enabling every end point to have this property
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=apiGateway
management.tracing.sampling.probability=1.0



## resilience 4j Properties
## register health indicator --> should be true as you enabled health in actuator this ensures the synchronization
### SlidingWindowType --> On what type you are switching on the circuit --> it can be time_based or count_based
## define sliding window size next it means it checks last sliding window size apis and check what is the failure percentage
## define the percentage
## Different states if circuit breaker -->        closed -----> open ------- halfOpen   halfOpen----> closed
## So after waitDurationInOpenState time it goes into halfOpenState and checks if the service is working or not
##

resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5
##Resilience4j timeout properties
resilience4j.timelimiter.configs.default.timeout-duration=3s

## Resilience4j retry properties
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s

logging.pattern.level=%5p [${spring.application.name:},traceId=%X{traceId},spanId=%X{spanId}]
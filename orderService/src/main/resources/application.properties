spring.application.name=orderService
spring.datasource.url=jdbc:postgresql://postgresOrder:5432/order
spring.datasource.username=hrushik
spring.datasource.password=hrushik
spring.jpa.hibernate.ddl-auto=none
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
logging.level.org.springframework.boot.context.config=DEBUG
logging.level.org.springframework.jdbc=DEBUG
logging.level.org.hibernate.engine.jdbc.connections=DEBUG
server.port=8081
springdoc.swagger-ui.path=/swagger-ui/html

## Actuator End points
## web-exposure --> enabling every end point to have this property
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=orderService
management.tracing.sampling.probability=1.0
management.tracing.enabled=true
spring.cloud.openfeign.tracing.enabled=true


## resilience 4j Properties
## register health indicator --> should be true as you enabled health in actuator this ensures the synchronization
### SlidingWindowType --> On what type you are switching on the circuit --> it can be time_based or count_based
## define sliding window size next it means it checks last sliding window size apis and check what is the failure percentage
## define the percentage
## Different states if circuit breaker -->        closed -----> open ------- halfOpen   halfOpen----> closed
## So after waitDurationInOpenState time it goes into halfOpenState and checks if the service is working or not
##

resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5
##Resilience4j timeout properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

## Resilience4j retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s

## kafka properties
spring.kafka.bootstrap-servers=broker:29092
spring.kafka.template.default-topic=order-placed
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


logging.pattern.level=%5p [${spring.application.name:},traceId=%X{traceId},spanId=%X{spanId}]
